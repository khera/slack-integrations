#!/usr/bin/env perl

use strict;

# Time-stamp: 		"02 June 2015, 09:58:05 (khera@yertle.int.kcilink.com)"

use HTTP::Request::Common qw(POST);
use LWP::UserAgent;
use JSON;
use Getopt::Std;

## CUSTOMIZE

my $posturl = 'https://hooks.slack.com/services/T0000000/B00000000/xxxxxxxxxxxxxxxxxxxxxxxx';                 # from Incoming Webhooks Integration

my $default_channel = '#general'; # override with -C flag.

## END CUSTOMIZE

=pod

=head1 slack-nagios-notify

Post a nagios notificaion message to a channel in a slack.com group using the
"Incoming Webhooks" integration.

Expected integration in Nagios is to define a notifier for services
and for hosts like these:

  define command {
    command_name    notify-slack
    command_line    /usr/local/sbin/slack-nagios-notify -C $CONTACTEMAIL$ -t "$NOTIFICATIONTYPE$" -a "$HOSTALIAS$" -d "$SERVICEDESC$" -w "$SHORTDATETIME$" -s "$SERVICESTATE$" -o "$SERVICEOUTPUT$" -u "$SERVICEACKAUTHOR$" -c "$SERVICEACKCOMMENT$"
  }

  define command {
    command_name    host-notify-slack
    command_line    /usr/local/sbin/slack-nagios-notify -C $CONTACTEMAIL$ -t "$NOTIFICATIONTYPE$" -a "$HOSTALIAS$" -d "host" -w "$SHORTDATETIME$" -s "$HOSTSTATE$" -o "$HOSTOUTPUT$" -u "$HOSTACKAUTHOR$" -c "$HOSTACKCOMMENT$"
  }

Then add a user named C<slack> to be notified using these notifier commands:

 define contact {
   contact_name                    slack
   alias                           Slack App
   service_notification_period     24x7
   host_notification_period        24x7
   service_notification_options    w,u,c,r
   host_notification_options       d,u,r
   service_notification_commands   notify-slack
   host_notification_commands      host-notify-slack
   email                           \#general
 }

The C<email> in the contact is the channel name to post the notification for
this contact.

And finally, add this new user C<slack> to whatever notifications you need.

To configure Slack, you need to enable the Incoming Webhooks
integration. The C<$token> variable at the top of this script needs to
be set to the token from that integration, and the C<$domain> needs to
be your Slack domain name for your group.

=cut

# parse command line for pieces of nagios notification to fill into
# message. they correspond to nagios notification string variables:
#
# -C channel
# -t $NOTIFICATIONTYPE$
# -a $HOSTALIAS$
# -d $SERVICEDESC$
# -w $SHORTDATETIME$
# -s $SERVICESTATE$
# -o $SERVICEOUTPUT$
# -u $SERVICEACKAUTHOR$ (used if ACK type)
# -c $SERVICEACKCOMMENT$ (used if ACK type)
# -n $NOTIFICATIONCOMMENT$

my %opts;
getopts('C:t:a:d:w:s:o:u:c:n:',\%opts);

my $payload = {
	       channel => $opts{C} // $default_channel,
	       username => 'nagios',
	       icon_emoji => ':construction:',
	       text => $opts{t},
             };

if (not exists $opts{t}) {
  die "must specify -t\n";

} elsif ($opts{t} eq 'PROBLEM') {
  $payload->{text} .= ' :scream:';
  $payload->{attachments} = [
    {
      fallback => "Problem: $opts{a}/$opts{d}  State: $opts{s} $opts{o}",
      color => 'danger',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => $opts{s},
          short => 'false',
        },
        {
          title => 'Detail',
          value => $opts{o},
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];
} elsif ($opts{t} eq 'RECOVERY') {
  $payload->{text} .= ' :smiley:';
  $payload->{attachments} = [
    {
      fallback => "Recovery: $opts{a}/$opts{d}  State: $opts{s} $opts{o}",
      color => 'good',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => $opts{s},
          short => 'false',
        },
        {
          title => 'Detail',
          value => $opts{o},
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];
} elsif ($opts{t} eq 'ACKNOWLEDGEMENT') {
  $payload->{text} .= ' :wrench:';
  $payload->{attachments} = [
    {
      fallback => "Acknowledged: $opts{a}/$opts{d}  State: $opts{s} $opts{o}",
      pretext => "Host $opts{a} at $opts{w}",
      text => "Service: $opts{d}",
      color => 'warning',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => $opts{s},
          short => 'false',
        },
        {
          title => 'Detail',
          value => $opts{o},
          short => 'false',
        },
        {
          title => 'Is now being handled by',
          value => $opts{u},
          short => 'false',
        },
      ],                        # fields
    },                          # attachment 1
  ];
} elsif ($opts{t} eq 'CUSTOM') {
  $payload->{text} .= ' :alien:';
  $payload->{attachments} = [
    {
      fallback => "Manual Notification: $opts{a}/$opts{d}  State: $opts{s} $opts{o}",
      color => '#D3D3D3',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => 'Manually Triggered Notification',
          short => 'false',
        },
        {
          title => 'Detail',
          value => $opts{o},
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];

} elsif ($opts{t} eq 'DOWNTIMESTART') {
  $payload->{text} .= ' :construction:';
  $payload->{attachments} = [
    {
      fallback => "Downtime: $opts{a}/$opts{d}  State: Is now in a planned downtime (notifications disabled)",
      color => '#7C19FF',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => 'Is now in a planned downtime (notifications disabled)',
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];

} elsif ($opts{t} eq 'DOWNTIMEEND') {
  $payload->{text} .= ' :construction:';
  $payload->{attachments} = [
    {
      fallback => "Downtime: $opts{a}/$opts{d}  State: Downtime ended by schedule (notifications enabled)",
      color => '#7C19FF',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => 'Downtime ended by schedule (notifications enabled)',
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];

} elsif ($opts{t} eq 'DOWNTIMECANCELLED') {
  $payload->{text} .= ' :construction:';
  $payload->{attachments} = [
    {
      fallback => "Downtime: $opts{a}/$opts{d}  State: Downtime has been cancelled (notifications enabled)",
      color => '#7C19FF',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => 'Downtime has been cancelled (notifications enabled)',
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];

} elsif ($opts{t} eq 'FLAPPINGSTART') {
  $payload->{text} .= ' :skull:';
  $payload->{attachments} = [
    {
      fallback => "Flapping: $opts{a}/$opts{d}  State: Service detected flapping (notifications disabled)",
      color => '#19FFF4',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => 'Service detected flapping (notifications disabled)',
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];

} elsif ($opts{t} eq 'FLAPPINGSTOP') {
  $payload->{text} .= ' :skull:';
  $payload->{attachments} = [
    {
      fallback => "Flapping: $opts{a}/$opts{d}  State: Service stopped flapping (notifications enabled)",
      color => 'good',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => 'Service stopped flapping (notifications enabled)',
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];

} elsif ($opts{t} eq 'FLAPPINGDISABLED') {
  $payload->{text} .= ' :wrench:';
  $payload->{attachments} = [
    {
      fallback => "Flapping: $opts{a}/$opts{d}  State: Flapping detection turned off (notifications enabled)",
      color => '#19FFF4',
      fields => [
        {
          title => 'Host',
          value => $opts{a},
          short => 'false',
        },
        {
          title => 'Service',
          value => $opts{d},
          short => 'false',
        },
        {
          title => 'State',
          value => 'Flapping detection turned off (notifications enabled)',
          short => 'false',
        }
      ],                        # fields
    },                          # attachment 1
  ];

} else { # something unknown, just display it flat.
  $payload->{color} = 'danger';
  $payload->{text} = "$opts{t} $opts{a}/$opts{d} $opts{w} State: $opts{s} $opts{o} $opts{u} $opts{c}";
}


my $ua = LWP::UserAgent->new;
$ua->timeout(15);
$ua->envx_proxy;

my $req = POST("${posturl}", ['payload' => encode_json($payload)]);


my $resp = $ua->request($req);

if ($resp->is_success) {
  #print $resp->decoded_content;  # or whatever
} else {
  die "code: ".$resp->code.", status line: ".$resp->status_line;
}
exit(0);

=pod

=head1 COPYRIGHT

Copyright Vick Khera <vivek@mailermailer.com>,
Andy Puettmann <andypuettmann@gmail.com>


=cut
